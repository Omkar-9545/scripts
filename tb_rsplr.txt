`timescale 1ns/1ps

module tb_resampler_top;

    parameter CLK_PERIOD = 10;
    parameter DATA_WIDTH = 16;

    reg clk, rst;
    reg signed [DATA_WIDTH-1:0] in_sample;
    reg in_valid;
    wire signed [DATA_WIDTH-1:0] out_sample;
    wire out_valid;

    // Sticky flags
    wire sticky_mult, sticky_accum, sticky_ppm, sticky_final;

    // Coefficients for 9-tap differentiator: (-1, 0, 1) pattern
    reg signed [15:0] coeffs [0:8];

    // PPM step
    reg signed [31:0] ppm_step;

    // Instantiate DUT
    resampler_top dut (
        .clk(clk),
        .rst(rst),
        .in_valid(in_valid),
        .in_sample(in_sample),
        .coeffs(coeffs),
        .ppm_step(ppm_step),
        .out_valid(out_valid),
        .out_sample(out_sample),
        .sticky_mult(sticky_mult),
        .sticky_accum(sticky_accum),
        .sticky_ppm(sticky_ppm),
        .sticky_final(sticky_final)
    );

    // Clock Generation
    initial clk = 0;
    always #(CLK_PERIOD/2) clk = ~clk;

    integer i, f_in, f_out;

    initial begin
        $dumpfile("resampler.vcd");
        $dumpvars(0, tb_resampler_top);

        rst = 1;
        in_valid = 0;
        in_sample = 0;
        ppm_step = 0;

        // Initialize coeffs (differentiator-like)
        coeffs[0] = -16'sd1; coeffs[1] = 0; coeffs[2] = 16'sd1;
        coeffs[3] = -16'sd1; coeffs[4] = 0; coeffs[5] = 16'sd1;
        coeffs[6] = -16'sd1; coeffs[7] = 0; coeffs[8] = 16'sd1;

        f_in = $fopen("input_samples.txt", "w");
        f_out = $fopen("output_samples.txt", "w");

        #20;
        rst = 0;

        // Case 1: PPM = 0 → Output = Input Rate
        ppm_step = 32'sd0;

        $display("### Sending ramp input with PPM = 0 ###");
        for (i = 0; i < 40; i++) begin
            @(posedge clk);
            in_valid <= 1;
            in_sample <= i;
            $fwrite(f_in, "%d\n", i);
        end
        in_valid <= 0;
        in_sample <= 0;

        // Wait and record output
        repeat (150) begin
            @(posedge clk);
            if (out_valid)
                $fwrite(f_out, "%d\n", out_sample);
        end

        // Case 2: Positive PPM → Output > Input Rate
        ppm_step = 32'sd500000; // small PPM

        $display("### Sending second ramp with PPM = +500000 ###");
        for (i = 0; i < 40; i++) begin
            @(posedge clk);
            in_valid <= 1;
            in_sample <= 100 + i;
            $fwrite(f_in, "%d\n", 100 + i);
        end
        in_valid <= 0;

        repeat (150) begin
            @(posedge clk);
            if (out_valid)
                $fwrite(f_out, "%d\n", out_sample);
        end

        // Case 3: Negative PPM → Output < Input Rate
        ppm_step = -32'sd500000;

        $display("### Sending third ramp with PPM = -500000 ###");
        for (i = 0; i < 40; i++) begin
            @(posedge clk);
            in_valid <= 1;
            in_sample <= 200 + i;
            $fwrite(f_in, "%d\n", 200 + i);
        end
        in_valid <= 0;

        repeat (150) begin
            @(posedge clk);
            if (out_valid)
                $fwrite(f_out, "%d\n", out_sample);
        end

        $fclose(f_in);
        $fclose(f_out);

        // Display sticky flags
        $display("Sticky Flags:");
        $display("  Mult Overflow:  %b", sticky_mult);
        $display("  Accum Overflow: %b", sticky_accum);
        $display("  PPM  Overflow:  %b", sticky_ppm);
        $display("  Final Overflow: %b", sticky_final);

        $finish;
    end

endmodule

